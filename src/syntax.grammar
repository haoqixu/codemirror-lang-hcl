@top ConfigFile { (Body | Object)? }
@detectDelim

@skip { space | Comment }

Body { (Attribute | Block)+ }

Attribute { Identifier "=" Expression }

Block { Identifier (Identifier | StringLit)* "{" Body? "}" }

Object { "{" _object_elems? "}" }
_object_elems { ObjectElem (","? ObjectElem)* ","? }
ObjectElem { !objectElem Expression ("=" | ":") Expression }

@precedence {
    unaryOperation @left
    binary_mult @left
    binary_add @left
    binary_ord @left
    binary_comp @left
    binary_and @left
    binary_or @left

    // ?
    attrSplat @right
    fullSplat @right

    variableExpr @right
    objectElem
    expression @right
    conditional @left
    functionArguments @right

    templateLiteralChunk, templateLiteralChunkEmpty

    stringLit, quotedTemplate
}

Expression {
    !expression (_expr_term | Conditional)
}

_expr_term {
    LiteralValue |
    TemplateExpr |
    CollectionValue |
    VariableExpr |
    FunctionCall |
    ForExpr |
    Operation |
    _expr_term Index |
    _expr_term GetAttr |
    _expr_term Splat |
    "(" Expression ")"
}

LiteralValue { NumericLit | BoolLit | NullLit | StringLit }

@external tokens scanQuotedTemplateStart from "./tokens.js" { QuotedTemplateStart }
@external tokens scanQuotedTemplateEnd from "./tokens.js" { QuotedTemplateEnd }
@external tokens scanTemplateInterpolationStart from "./tokens.js" { TemplateInterpolationStart }
@external tokens scanTemplateInterpolationEnd from "./tokens.js" { TemplateInterpolationEnd }
@external tokens scanTemplateDirectiveStart from "./tokens.js" { TemplateDirectiveStart }
@external tokens scanTemplateDirectiveEnd from "./tokens.js" { TemplateDirectiveEnd }
@external tokens scanHeredocIdentifier from "./tokens.js" { HeredocIdentifier }
@external tokens scanTemplateLiteralChunk from "./tokens.js" { templateLiteralChunk }

@context trackTemplate from "./tokens.js"

TemplateExpr { QuotedTemplate | HeredocTemplate }

QuotedTemplate {
    QuotedTemplateStart
    template?
    QuotedTemplateEnd
}

HeredocTemplate {
    HeredocStart
    HeredocIdentifier
    template?
    HeredocIdentifier
}
HeredocStart { "<<" | "<<-" }

template {
    !quotedTemplate 
    (
     TemplateInterpolation |
     TemplateDirective |
     TemplateLiteral
    )+
}

TemplateLiteral { templateLiteralChunk templateLiteralChunks }
templateLiteralChunks { !templateLiteralChunkEmpty "" | !templateLiteralChunk templateLiteralChunk templateLiteralChunks }

TemplateInterpolation {
  TemplateInterpolationStart
  StripMarker?
  Expression?
  StripMarker?
  TemplateInterpolationEnd
}
TemplateDirective { TemplateFor | TemplateIf }
TemplateFor { TemplateForStart template? TemplateForEnd }
TemplateForStart {
      TemplateDirectiveStart
      StripMarker?
      kw<"for">
      Identifier
      ("," Identifier)?
      kw<"in">
      Expression
      StripMarker?
      TemplateDirectiveEnd
}
TemplateForEnd {
      TemplateDirectiveStart
      StripMarker?
      kw<"endfor">
      StripMarker?
      TemplateDirectiveEnd
}

TemplateIf {
      TemplateIfIntro
      template?
      (TemplateElseIntro template?)?
      TemplateIfEnd
}
TemplateIfIntro {
      TemplateDirectiveStart
      StripMarker?
      kw<"if">
      Expression
      StripMarker?
      TemplateDirectiveEnd
}
TemplateElseIntro {
    TemplateDirectiveStart
    StripMarker?
    kw<"else">
    StripMarker?
    TemplateDirectiveEnd
}
TemplateIfEnd {
      TemplateDirectiveStart
      StripMarker?
      kw<"endif">
      StripMarker?
      TemplateDirectiveEnd
}

StringLit { QuotedTemplateStart TemplateLiteral !stringLit QuotedTemplateEnd }

CollectionValue { Tuple | Object }

Tuple { "[" _tuple_elems? "]" }
_tuple_elems { Expression ("," Expression)* ","? }

VariableExpr { !variableExpr Identifier}

FunctionCall { Identifier "(" FunctionArguments? ")" }
FunctionArguments { !functionArguments Expression ("," Expression)* ("," | Ellipsis)? }

Conditional { !conditional Expression ControlOp<"?"> Expression ControlOp<":"> Expression }

ArithOp<expr> { expr }
LogicOp<expr> { expr }
CompareOp<expr> { expr }
ControlOp<expr> { expr }

Operation { UnaryOperation | BinaryOperation }
UnaryOperation { !unaryOperation (ArithOp<"-"> | LogicOp<"!">) _expr_term }
BinaryOperation {
    _expr_term !binary_mult ArithOp<"*" | "/" | "%"> _expr_term |
    _expr_term !binary_add  ArithOp<"+" | "-"> _expr_term |
    _expr_term !binary_ord  CompareOp<">" | ">=" | "<" | "<="> _expr_term |
    _expr_term !binary_comp CompareOp<"==" | "!="> _expr_term |
    _expr_term !binary_and  LogicOp<"&&"> _expr_term |
    _expr_term !binary_or   LogicOp<"||"> _expr_term
}

ForExpr { ForTupleExpr | ForObjectExpr }
ForTupleExpr { "[" ForIntro Expression ForCond? "]" }
ForObjectExpr {
    "{"
    ForIntro
    Expression
    "=>"
    Expression
    Ellipsis?
    ForCond?
    "}"
}
ForIntro {
    kw<"for">
    Identifier
    ("," Identifier)?
    kw<"in">
    Expression
    ":"
}
ForCond { kw<"if"> Expression }

Index { NewIndex | LegacyIndex }
NewIndex { "[" Expression "]" }

GetAttr { "." Identifier}

Splat { AttrSplat | FullSplat }
AttrSplat { !attrSplat ".*" (GetAttr | Index)*}
FullSplat { !fullSplat "[*]" (GetAttr | Index)*}

Comment { LineComment | BlockComment }

BoolLit[@dynamicPrecedence=1] { @extend[@name=true]<Identifier, "true"> | @extend[@name=false]<Identifier, "false"> }
NullLit[@dynamicPrecedence=1] { @extend[@name=null]<Identifier, "null"> }

kw<word> { @specialize[@name={word}]<Identifier, word>}

@tokens {
    space { @whitespace+ }

    NumericLit {
        @digit+ ("." @digit+ ($[eE]$[+-]? @digit+)?)? |
        "0x" (@digit | $[a-fA-F])+
    }

    Identifier { $[a-zA-Z_] $[a-zA-Z_\-0-9]* }

    Ellipsis { "..." }
    LegacyIndex { "." @digit+ }

    StripMarker { "~" }

    @precedence {
        NumericLit, LegacyIndex, ".", Identifier,

        LineComment, "/"
    }

    LineComment {
        "#" ![\n]* |
        "//" ![\n]*
    }

    // https://stackoverflow.com/questions/13014947/regex-to-match-a-c-style-multiline-comment/36328890#36328890
    BlockComment {
        "/*" ![*]* "*"+ (![*/] ![*]* "*"+ )* "/"
    }
}
