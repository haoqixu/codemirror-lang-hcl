# Empty file

==>

ConfigFile()

# Single attribute

one = two

==>

ConfigFile(Body(Attribute(Identifier, Expression(VariableExpr(Identifier)))))

# Attributes

one = two
type = string
key = val

==>

ConfigFile(Body(
        Attribute(Identifier, Expression(VariableExpr(Identifier))),
        Attribute(Identifier, Expression(VariableExpr(Identifier))),
        Attribute(Identifier, Expression(VariableExpr(Identifier)))))

# Literal null

a = null
null1 = null
null2 = null
null = null

==>

ConfigFile(Body(
        Attribute(Identifier, Expression(LiteralValue(NullLit(null)))),
        Attribute(Identifier, Expression(LiteralValue(NullLit(null)))),
        Attribute(Identifier, Expression(LiteralValue(NullLit(null)))),
        Attribute(Identifier, Expression(LiteralValue(NullLit(null))))))

# Literal boolean

a = true
true1 = true
trueeee = true
true = true
b = false
false1 = false
falseeee = false
false = false

==>

ConfigFile(Body(
        Attribute(Identifier, Expression(LiteralValue(BoolLit(true)))),
        Attribute(Identifier, Expression(LiteralValue(BoolLit(true)))),
        Attribute(Identifier, Expression(LiteralValue(BoolLit(true)))),
        Attribute(Identifier, Expression(LiteralValue(BoolLit(true)))),
        Attribute(Identifier, Expression(LiteralValue(BoolLit(false)))),
        Attribute(Identifier, Expression(LiteralValue(BoolLit(false)))),
        Attribute(Identifier, Expression(LiteralValue(BoolLit(false)))),
        Attribute(Identifier, Expression(LiteralValue(BoolLit(false))))))

# binary operators

a = 1 + 2 + 3 - 4
b = 1 + (2 + 3) - 4
c = 1 + (2 + (3 - 4))
a = 1 + 2 * 3 - 4
b = 1 + (2 + 3) / 4
c = 1 + 2 / (3 - 4)

==>

ConfigFile(Body(
            Attribute(Identifier,Expression
                (Operation(BinaryOperation
                           (Operation(BinaryOperation
                                      (Operation(BinaryOperation(
                                          LiteralValue(NumericLit),
                                          ArithOp
                                          LiteralValue(NumericLit)
                                      )),
                                      ArithOp
                                      LiteralValue(NumericLit))),
                            ArithOp
                            LiteralValue(NumericLit))))),
            Attribute(Identifier,Expression
                (Operation(BinaryOperation
                           (Operation(BinaryOperation(
                                LiteralValue(NumericLit),
                                ArithOp
                                Expression(Operation(BinaryOperation(
                                            LiteralValue(NumericLit)
                                            ArithOp
                                            LiteralValue(NumericLit)))))),
                            ArithOp
                            LiteralValue(NumericLit))))),
            Attribute(Identifier,Expression
                (Operation(BinaryOperation(
                    LiteralValue(NumericLit),
                    ArithOp
                    Expression(Operation(
                        BinaryOperation(
                            LiteralValue(NumericLit),
                            ArithOp
                            Expression(Operation(BinaryOperation(
                                        LiteralValue(NumericLit),
                                        ArithOp
                                        LiteralValue(NumericLit))))))))))),
            Attribute(Identifier,Expression
                (Operation(BinaryOperation
                           (Operation(BinaryOperation(
                                                      LiteralValue(NumericLit),
                                                      ArithOp
                                                      Operation(BinaryOperation(
                                                              LiteralValue(NumericLit)
                                                              ArithOp
                                                              LiteralValue(NumericLit)))
                                                     )),
                            ArithOp
                            LiteralValue(NumericLit))))),
            Attribute(Identifier,Expression
                (Operation(BinaryOperation(
                                           LiteralValue(NumericLit),
                                           ArithOp
                                           Operation(BinaryOperation(
                                                   Expression(Operation(BinaryOperation(
                                                               LiteralValue(NumericLit)
                                                               ArithOp
                                                               LiteralValue(NumericLit)))),
                                                   ArithOp
                                                   LiteralValue(NumericLit))))))),
            Attribute(Identifier,Expression
                    (Operation(BinaryOperation(
                       LiteralValue(NumericLit),
                       ArithOp
                       Operation(BinaryOperation(
                               LiteralValue(NumericLit),
                               ArithOp
                               Expression(Operation(BinaryOperation(
                                           LiteralValue(NumericLit)
                                           ArithOp
                                           LiteralValue(NumericLit))))))))))))

# ternary operator

a = (1 > 2) ? "a" : "b"

==>

ConfigFile(
        Body(
            Attribute(
                Identifier
                Expression(
                    Conditional(
                        Expression(
                            Expression(
                                Operation(
                                    BinaryOperation(
                                        LiteralValue(NumericLit)
                                        CompareOp
                                        LiteralValue(NumericLit)))))
                        ControlOp
                        Expression(
                            LiteralValue(
                                StringLit(
                                    QuotedTemplateStart
                                    TemplateLiteral
                                    QuotedTemplateEnd)))
                        ControlOp
                        Expression(
                            LiteralValue(
                                StringLit(
                                    QuotedTemplateStart
                                    TemplateLiteral
                                    QuotedTemplateEnd))))))))
